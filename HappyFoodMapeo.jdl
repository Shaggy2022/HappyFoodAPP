
application {
  config {
    baseName happyFood
    applicationType monolith
    packageName com.happyfood
    authenticationType jwt
    devDatabaseType postgresql
    prodDatabaseType postgresql
    cacheProvider no
    buildTool maven
    clientFramework angularX
    enableTranslation true
    nativeLanguage es
    languages [en, es]
    websocket false 
    //testFrameworks [cucumber]
    //entitysuffix false
    jhiPrefix happy
    reactive false 
    serverPort 8080
    searchEngine false
    clientTheme vapor
    clientThemeVariant primary
  }
  entities *
}

enum State{
	ACTIVE(Activo)
	INACTIVE(Inactivo)
}

entity DocumentType{
	initials String required maxlength(10) unique
    documentName String required maxlength(100) unique
    stateDocumentType State required
}

entity Customer{
	firstName String required maxlength(50)
    secondName String maxlength(50)
    firstLastname String required maxlength(50)
    secondLastname String maxlength(50)
	address String required maxlength(100)
    phoneNumber String required maxlength(50)
    documentNumber String required maxlength(50) unique
}

entity Invoice{
	invoiceNumber Integer required
    iva Double required
    totalToPay Double required
}

entity Product{
	serial String required maxlength(255) unique
    requiredProduct String required maxlength(200)
    price BigDecimal required
}

entity InvoiceProduct{
	date  LocalDate required
}

entity WorkDay{
	dayName	String required maxlength(40) unique
	month String required maxlength(40) unique
    state State required
}

entity Horary{
	startTime String required
    endTime String required
}

entity Manager{
	documentNumber String required maxlength(50) unique 
	firstName String required maxlength(50)
    secondName String maxlength(50)
    firstLastname String required maxlength(50)
    secondLastname String maxlength(50)
}

entity Employee{
	documentNumber String required maxlength(50) unique
	firstName String required maxlength(50)
    secondName String maxlength(50)
    firstLastname String required maxlength(50)
    secondLastname String maxlength(50)
    position String required maxlength(100)
    phoneNumber String required maxlength(100)
    address String required maxlength(100)
    state State required
}

entity Order{
	orderRequired String required maxlength(200)
    date  LocalDate required
    amount Integer required
  	fullOrderValue BigDecimal required
}

entity Inventory{
	amount Integer required
    description String maxlength(200)
    price BigDecimal required
}

relationship OneToMany {
	DocumentType to Customer{documentType(documentName) required}
    Customer to Order{customer(firstName) required}
    Order to Invoice{order(orderRequired) required}
    Horary to WorkDay{horary required}
    WorkDay to Employee{workDay(dayName) required}
    Product to InvoiceProduct{product(serial) required}
  	Invoice to InvoiceProduct{invoice required}
    Invoice to Inventory{invoice(invoiceNumber) required}
    Inventory to Product{inventory(description) required}
    Manager to Employee{manager(firstName) required} 
}

relationship OneToOne { //el de la derecha le manda la llave primaria al de la izquierda
	Customer{user(login) required} to User
    Manager{user(login) required} to User
    Employee{user(login) required} to User
}

dto * with mapstruct
service * with serviceImpl //SOLID
paginate * with pagination 

    